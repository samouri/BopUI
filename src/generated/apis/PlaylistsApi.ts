/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 7.0.0 (2b61a63)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Playlists,
    PlaylistsFromJSON,
    PlaylistsToJSON,
} from '../models';

export interface PlaylistsDeleteRequest {
    id?: number;
    name?: string;
    userAdded?: number;
    dateAdded?: string;
    prefer?: PlaylistsDeletePreferEnum;
}

export interface PlaylistsGetRequest {
    id?: number;
    name?: string;
    userAdded?: number;
    dateAdded?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: PlaylistsGetPreferEnum;
}

export interface PlaylistsPatchRequest {
    id?: number;
    name?: string;
    userAdded?: number;
    dateAdded?: string;
    prefer?: PlaylistsPatchPreferEnum;
    playlists?: Playlists;
}

export interface PlaylistsPostRequest {
    select?: string;
    prefer?: PlaylistsPostPreferEnum;
    playlists?: Playlists;
}

/**
 * no description
 */
export class PlaylistsApi extends runtime.BaseAPI {

    /**
     */
    async playlistsDeleteRaw(requestParameters: PlaylistsDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.userAdded !== undefined) {
            queryParameters['user_added'] = requestParameters.userAdded;
        }

        if (requestParameters.dateAdded !== undefined) {
            queryParameters['date_added'] = requestParameters.dateAdded;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/playlists`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistsDelete(requestParameters: PlaylistsDeleteRequest): Promise<void> {
        await this.playlistsDeleteRaw(requestParameters);
    }

    /**
     */
    async playlistsGetRaw(requestParameters: PlaylistsGetRequest): Promise<runtime.ApiResponse<Array<Playlists>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.userAdded !== undefined) {
            queryParameters['user_added'] = requestParameters.userAdded;
        }

        if (requestParameters.dateAdded !== undefined) {
            queryParameters['date_added'] = requestParameters.dateAdded;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.range !== undefined && requestParameters.range !== null) {
            headerParameters['Range'] = String(requestParameters.range);
        }

        if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
            headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
        }

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/playlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlaylistsFromJSON));
    }

    /**
     */
    async playlistsGet(requestParameters: PlaylistsGetRequest): Promise<Array<Playlists>> {
        const response = await this.playlistsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async playlistsPatchRaw(requestParameters: PlaylistsPatchRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.userAdded !== undefined) {
            queryParameters['user_added'] = requestParameters.userAdded;
        }

        if (requestParameters.dateAdded !== undefined) {
            queryParameters['date_added'] = requestParameters.dateAdded;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/playlists`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistsToJSON(requestParameters.playlists),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistsPatch(requestParameters: PlaylistsPatchRequest): Promise<void> {
        await this.playlistsPatchRaw(requestParameters);
    }

    /**
     */
    async playlistsPostRaw(requestParameters: PlaylistsPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/playlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaylistsToJSON(requestParameters.playlists),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async playlistsPost(requestParameters: PlaylistsPostRequest): Promise<void> {
        await this.playlistsPostRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PlaylistsDeletePreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum PlaylistsGetPreferEnum {
    Countnone = 'count=none'
}
/**
    * @export
    * @enum {string}
    */
export enum PlaylistsPatchPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum PlaylistsPostPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}

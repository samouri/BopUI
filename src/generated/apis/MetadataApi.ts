/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 7.0.0 (2b61a63)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Metadata,
    MetadataFromJSON,
    MetadataToJSON,
} from '../models';

export interface MetadataDeleteRequest {
    id?: number;
    youtubeId?: string;
    youtubeTitle?: string;
    title?: string;
    artist?: string;
    thumbnailUrl?: string;
    album?: string;
    youtubeDuration?: string;
    dateAdded?: string;
    prefer?: MetadataDeletePreferEnum;
}

export interface MetadataGetRequest {
    id?: number;
    youtubeId?: string;
    youtubeTitle?: string;
    title?: string;
    artist?: string;
    thumbnailUrl?: string;
    album?: string;
    youtubeDuration?: string;
    dateAdded?: string;
    select?: string;
    order?: string;
    range?: string;
    rangeUnit?: string;
    offset?: string;
    limit?: string;
    prefer?: MetadataGetPreferEnum;
}

export interface MetadataPatchRequest {
    id?: number;
    youtubeId?: string;
    youtubeTitle?: string;
    title?: string;
    artist?: string;
    thumbnailUrl?: string;
    album?: string;
    youtubeDuration?: string;
    dateAdded?: string;
    prefer?: MetadataPatchPreferEnum;
    metadata?: Metadata;
}

export interface MetadataPostRequest {
    select?: string;
    prefer?: MetadataPostPreferEnum;
    metadata?: Metadata;
}

/**
 * no description
 */
export class MetadataApi extends runtime.BaseAPI {

    /**
     */
    async metadataDeleteRaw(requestParameters: MetadataDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.youtubeId !== undefined) {
            queryParameters['youtube_id'] = requestParameters.youtubeId;
        }

        if (requestParameters.youtubeTitle !== undefined) {
            queryParameters['youtube_title'] = requestParameters.youtubeTitle;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.artist !== undefined) {
            queryParameters['artist'] = requestParameters.artist;
        }

        if (requestParameters.thumbnailUrl !== undefined) {
            queryParameters['thumbnail_url'] = requestParameters.thumbnailUrl;
        }

        if (requestParameters.album !== undefined) {
            queryParameters['album'] = requestParameters.album;
        }

        if (requestParameters.youtubeDuration !== undefined) {
            queryParameters['youtube_duration'] = requestParameters.youtubeDuration;
        }

        if (requestParameters.dateAdded !== undefined) {
            queryParameters['date_added'] = requestParameters.dateAdded;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/metadata`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async metadataDelete(requestParameters: MetadataDeleteRequest): Promise<void> {
        await this.metadataDeleteRaw(requestParameters);
    }

    /**
     */
    async metadataGetRaw(requestParameters: MetadataGetRequest): Promise<runtime.ApiResponse<Array<Metadata>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.youtubeId !== undefined) {
            queryParameters['youtube_id'] = requestParameters.youtubeId;
        }

        if (requestParameters.youtubeTitle !== undefined) {
            queryParameters['youtube_title'] = requestParameters.youtubeTitle;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.artist !== undefined) {
            queryParameters['artist'] = requestParameters.artist;
        }

        if (requestParameters.thumbnailUrl !== undefined) {
            queryParameters['thumbnail_url'] = requestParameters.thumbnailUrl;
        }

        if (requestParameters.album !== undefined) {
            queryParameters['album'] = requestParameters.album;
        }

        if (requestParameters.youtubeDuration !== undefined) {
            queryParameters['youtube_duration'] = requestParameters.youtubeDuration;
        }

        if (requestParameters.dateAdded !== undefined) {
            queryParameters['date_added'] = requestParameters.dateAdded;
        }

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.range !== undefined && requestParameters.range !== null) {
            headerParameters['Range'] = String(requestParameters.range);
        }

        if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
            headerParameters['Range-Unit'] = String(requestParameters.rangeUnit);
        }

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetadataFromJSON));
    }

    /**
     */
    async metadataGet(requestParameters: MetadataGetRequest): Promise<Array<Metadata>> {
        const response = await this.metadataGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async metadataPatchRaw(requestParameters: MetadataPatchRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.youtubeId !== undefined) {
            queryParameters['youtube_id'] = requestParameters.youtubeId;
        }

        if (requestParameters.youtubeTitle !== undefined) {
            queryParameters['youtube_title'] = requestParameters.youtubeTitle;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.artist !== undefined) {
            queryParameters['artist'] = requestParameters.artist;
        }

        if (requestParameters.thumbnailUrl !== undefined) {
            queryParameters['thumbnail_url'] = requestParameters.thumbnailUrl;
        }

        if (requestParameters.album !== undefined) {
            queryParameters['album'] = requestParameters.album;
        }

        if (requestParameters.youtubeDuration !== undefined) {
            queryParameters['youtube_duration'] = requestParameters.youtubeDuration;
        }

        if (requestParameters.dateAdded !== undefined) {
            queryParameters['date_added'] = requestParameters.dateAdded;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/metadata`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataToJSON(requestParameters.metadata),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async metadataPatch(requestParameters: MetadataPatchRequest): Promise<void> {
        await this.metadataPatchRaw(requestParameters);
    }

    /**
     */
    async metadataPostRaw(requestParameters: MetadataPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.select !== undefined) {
            queryParameters['select'] = requestParameters.select;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
            headerParameters['Prefer'] = String(requestParameters.prefer);
        }

        const response = await this.request({
            path: `/metadata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetadataToJSON(requestParameters.metadata),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async metadataPost(requestParameters: MetadataPostRequest): Promise<void> {
        await this.metadataPostRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum MetadataDeletePreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum MetadataGetPreferEnum {
    Countnone = 'count=none'
}
/**
    * @export
    * @enum {string}
    */
export enum MetadataPatchPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}
/**
    * @export
    * @enum {string}
    */
export enum MetadataPostPreferEnum {
    Representation = 'return=representation',
    Minimal = 'return=minimal',
    None = 'return=none'
}

/* tslint:disable */
/* eslint-disable */
/**
 * PostgREST API
 * standard public schema
 *
 * The version of the OpenAPI document: 7.0.0 (2b61a63)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import { Events, EventsFromJSON } from '../models'

export interface EventsGetRequest {
  id?: number
  eventType?: string
  dateAdded?: string
  userAdded?: number
  select?: string
  order?: string
  range?: string
  rangeUnit?: string
  offset?: string
  limit?: string
  prefer?: EventsGetPreferEnum
}

/**
 * no description
 */
export class EventsApi extends runtime.BaseAPI {
  /**
   */
  async eventsGetRaw(
    requestParameters: EventsGetRequest
  ): Promise<runtime.ApiResponse<Array<Events>>> {
    const queryParameters: runtime.HTTPQuery = {}

    if (requestParameters.id !== undefined) {
      queryParameters['id'] = requestParameters.id
    }

    if (requestParameters.eventType !== undefined) {
      queryParameters['event_type'] = requestParameters.eventType
    }

    if (requestParameters.dateAdded !== undefined) {
      queryParameters['date_added'] = requestParameters.dateAdded
    }

    if (requestParameters.userAdded !== undefined) {
      queryParameters['user_added'] = requestParameters.userAdded
    }

    if (requestParameters.select !== undefined) {
      queryParameters['select'] = requestParameters.select
    }

    if (requestParameters.order !== undefined) {
      queryParameters['order'] = requestParameters.order
    }

    if (requestParameters.offset !== undefined) {
      queryParameters['offset'] = requestParameters.offset
    }

    if (requestParameters.limit !== undefined) {
      queryParameters['limit'] = requestParameters.limit
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (requestParameters.range !== undefined && requestParameters.range !== null) {
      headerParameters['Range'] = String(requestParameters.range)
    }

    if (requestParameters.rangeUnit !== undefined && requestParameters.rangeUnit !== null) {
      headerParameters['Range-Unit'] = String(requestParameters.rangeUnit)
    }

    if (requestParameters.prefer !== undefined && requestParameters.prefer !== null) {
      headerParameters['Prefer'] = String(requestParameters.prefer)
    }

    const response = await this.request({
      path: `/events`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    })

    return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventsFromJSON))
  }

  /**
   */
  async eventsGet(requestParameters: EventsGetRequest): Promise<Array<Events>> {
    const response = await this.eventsGetRaw(requestParameters)
    return await response.value()
  }
}

/**
 * @export
 * @enum {string}
 */
export enum EventsGetPreferEnum {
  Countnone = 'count=none',
}
